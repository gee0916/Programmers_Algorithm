// 다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다.
// 지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다.
// 지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.

function solution(board) {
  const n = board.length;
  const d = [
    [0, 0],
    [0, 1],
    [0, -1],
    [-1, 0],
    [1, 0],
    [-1, -1],
    [1, -1],
    [-1, 1],
    [1, 1],
  ]; //위험지역 상하좌우대각선 체크
  let danger = new Set(); //위험지역을 담을 곳
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      if (board[i][j] === 1) {
        //현재칸이 1인 경우 모든방향을 위험지혁으로 Set에 추가
        d.forEach((v) => {
          let [col, row] = [i + v[0], j + v[1]];
          if (col >= 0 && col < n && row >= 0 && row < n) {
            //가로세로 한계점 지정(음수)
            danger.add(col + "," + row);
          }
        });
      }
    }
  }
  return n * n - danger.size; //전체 칸에서 danger의 사이즈만큼 제외
}

// 테스트 1 〉	통과 (0.25ms, 33.5MB)
// 테스트 2 〉	통과 (0.18ms, 33.4MB)
// 테스트 3 〉	통과 (0.28ms, 33.5MB)
// 테스트 4 〉	통과 (0.23ms, 33.6MB)
// 테스트 5 〉	통과 (0.34ms, 33.5MB)
// 테스트 6 〉	통과 (0.26ms, 33.6MB)
// 테스트 7 〉	통과 (0.32ms, 33.4MB)
// 테스트 8 〉	통과 (0.07ms, 33.5MB)
// 테스트 9 〉	통과 (0.11ms, 33.4MB)
// 테스트 10 〉	통과 (0.07ms, 33.6MB)
// 테스트 11 〉	통과 (0.11ms, 33.6MB)
// 테스트 12 〉	통과 (0.34ms, 33.4MB)
// 테스트 13 〉	통과 (0.23ms, 33.5MB)
// 테스트 14 〉	통과 (0.37ms, 33.6MB)
